/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.fretron.user.manager.model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class User extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1949891226084061933L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"User\",\"namespace\":\"org.fretron.user.manager.model\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"age\",\"type\":\"int\"},{\"name\":\"address\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"null\"},{\"name\":\"currentWealth\",\"type\":\"double\",\"default\":0.0},{\"name\":\"lastUpdate\",\"type\":{\"type\":\"long\",\"logicalType\":\"utc-to-epoch-millis\"},\"default\":0}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String name;
  @Deprecated public int age;
  @Deprecated public java.lang.String address;
  @Deprecated public double currentWealth;
  @Deprecated public long lastUpdate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public User() {}

  /**
   * All-args constructor.
   * @param name The new value for name
   * @param age The new value for age
   * @param address The new value for address
   * @param currentWealth The new value for currentWealth
   * @param lastUpdate The new value for lastUpdate
   */
  public User(java.lang.String name, java.lang.Integer age, java.lang.String address, java.lang.Double currentWealth, java.lang.Long lastUpdate) {
    this.name = name;
    this.age = age;
    this.address = address;
    this.currentWealth = currentWealth;
    this.lastUpdate = lastUpdate;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return age;
    case 2: return address;
    case 3: return currentWealth;
    case 4: return lastUpdate;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.String)value$; break;
    case 1: age = (java.lang.Integer)value$; break;
    case 2: address = (java.lang.String)value$; break;
    case 3: currentWealth = (java.lang.Double)value$; break;
    case 4: lastUpdate = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'age' field.
   * @return The value of the 'age' field.
   */
  public java.lang.Integer getAge() {
    return age;
  }

  /**
   * Sets the value of the 'age' field.
   * @param value the value to set.
   */
  public void setAge(java.lang.Integer value) {
    this.age = value;
  }

  /**
   * Gets the value of the 'address' field.
   * @return The value of the 'address' field.
   */
  public java.lang.String getAddress() {
    return address;
  }

  /**
   * Sets the value of the 'address' field.
   * @param value the value to set.
   */
  public void setAddress(java.lang.String value) {
    this.address = value;
  }

  /**
   * Gets the value of the 'currentWealth' field.
   * @return The value of the 'currentWealth' field.
   */
  public java.lang.Double getCurrentWealth() {
    return currentWealth;
  }

  /**
   * Sets the value of the 'currentWealth' field.
   * @param value the value to set.
   */
  public void setCurrentWealth(java.lang.Double value) {
    this.currentWealth = value;
  }

  /**
   * Gets the value of the 'lastUpdate' field.
   * @return The value of the 'lastUpdate' field.
   */
  public java.lang.Long getLastUpdate() {
    return lastUpdate;
  }

  /**
   * Sets the value of the 'lastUpdate' field.
   * @param value the value to set.
   */
  public void setLastUpdate(java.lang.Long value) {
    this.lastUpdate = value;
  }

  /**
   * Creates a new User RecordBuilder.
   * @return A new User RecordBuilder
   */
  public static org.fretron.user.manager.model.User.Builder newBuilder() {
    return new org.fretron.user.manager.model.User.Builder();
  }

  /**
   * Creates a new User RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new User RecordBuilder
   */
  public static org.fretron.user.manager.model.User.Builder newBuilder(org.fretron.user.manager.model.User.Builder other) {
    return new org.fretron.user.manager.model.User.Builder(other);
  }

  /**
   * Creates a new User RecordBuilder by copying an existing User instance.
   * @param other The existing instance to copy.
   * @return A new User RecordBuilder
   */
  public static org.fretron.user.manager.model.User.Builder newBuilder(org.fretron.user.manager.model.User other) {
    return new org.fretron.user.manager.model.User.Builder(other);
  }

  /**
   * RecordBuilder for User instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<User>
    implements org.apache.avro.data.RecordBuilder<User> {

    private java.lang.String name;
    private int age;
    private java.lang.String address;
    private double currentWealth;
    private long lastUpdate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.fretron.user.manager.model.User.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.age)) {
        this.age = data().deepCopy(fields()[1].schema(), other.age);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.address)) {
        this.address = data().deepCopy(fields()[2].schema(), other.address);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.currentWealth)) {
        this.currentWealth = data().deepCopy(fields()[3].schema(), other.currentWealth);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.lastUpdate)) {
        this.lastUpdate = data().deepCopy(fields()[4].schema(), other.lastUpdate);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing User instance
     * @param other The existing instance to copy.
     */
    private Builder(org.fretron.user.manager.model.User other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.age)) {
        this.age = data().deepCopy(fields()[1].schema(), other.age);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.address)) {
        this.address = data().deepCopy(fields()[2].schema(), other.address);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.currentWealth)) {
        this.currentWealth = data().deepCopy(fields()[3].schema(), other.currentWealth);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.lastUpdate)) {
        this.lastUpdate = data().deepCopy(fields()[4].schema(), other.lastUpdate);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public org.fretron.user.manager.model.User.Builder setName(java.lang.String value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public org.fretron.user.manager.model.User.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'age' field.
      * @return The value.
      */
    public java.lang.Integer getAge() {
      return age;
    }

    /**
      * Sets the value of the 'age' field.
      * @param value The value of 'age'.
      * @return This builder.
      */
    public org.fretron.user.manager.model.User.Builder setAge(int value) {
      validate(fields()[1], value);
      this.age = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'age' field has been set.
      * @return True if the 'age' field has been set, false otherwise.
      */
    public boolean hasAge() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'age' field.
      * @return This builder.
      */
    public org.fretron.user.manager.model.User.Builder clearAge() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'address' field.
      * @return The value.
      */
    public java.lang.String getAddress() {
      return address;
    }

    /**
      * Sets the value of the 'address' field.
      * @param value The value of 'address'.
      * @return This builder.
      */
    public org.fretron.user.manager.model.User.Builder setAddress(java.lang.String value) {
      validate(fields()[2], value);
      this.address = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'address' field has been set.
      * @return True if the 'address' field has been set, false otherwise.
      */
    public boolean hasAddress() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'address' field.
      * @return This builder.
      */
    public org.fretron.user.manager.model.User.Builder clearAddress() {
      address = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'currentWealth' field.
      * @return The value.
      */
    public java.lang.Double getCurrentWealth() {
      return currentWealth;
    }

    /**
      * Sets the value of the 'currentWealth' field.
      * @param value The value of 'currentWealth'.
      * @return This builder.
      */
    public org.fretron.user.manager.model.User.Builder setCurrentWealth(double value) {
      validate(fields()[3], value);
      this.currentWealth = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'currentWealth' field has been set.
      * @return True if the 'currentWealth' field has been set, false otherwise.
      */
    public boolean hasCurrentWealth() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'currentWealth' field.
      * @return This builder.
      */
    public org.fretron.user.manager.model.User.Builder clearCurrentWealth() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastUpdate' field.
      * @return The value.
      */
    public java.lang.Long getLastUpdate() {
      return lastUpdate;
    }

    /**
      * Sets the value of the 'lastUpdate' field.
      * @param value The value of 'lastUpdate'.
      * @return This builder.
      */
    public org.fretron.user.manager.model.User.Builder setLastUpdate(long value) {
      validate(fields()[4], value);
      this.lastUpdate = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'lastUpdate' field has been set.
      * @return True if the 'lastUpdate' field has been set, false otherwise.
      */
    public boolean hasLastUpdate() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'lastUpdate' field.
      * @return This builder.
      */
    public org.fretron.user.manager.model.User.Builder clearLastUpdate() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public User build() {
      try {
        User record = new User();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.String) defaultValue(fields()[0]);
        record.age = fieldSetFlags()[1] ? this.age : (java.lang.Integer) defaultValue(fields()[1]);
        record.address = fieldSetFlags()[2] ? this.address : (java.lang.String) defaultValue(fields()[2]);
        record.currentWealth = fieldSetFlags()[3] ? this.currentWealth : (java.lang.Double) defaultValue(fields()[3]);
        record.lastUpdate = fieldSetFlags()[4] ? this.lastUpdate : (java.lang.Long) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
